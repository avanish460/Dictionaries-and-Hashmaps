import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the sherlockAndAnagrams function below.
    static int sherlockAndAnagrams(String s) {
       
       Map<String, Integer> map = new HashMap<>();
       for(int i=0; i<s.length(); i++){
           for(int j=i; j<s.length(); j++){
               char ch[] = s.substring(i, j+1).toCharArray();
               Arrays.sort(ch);
               String ss = new String(ch);
               if(map.containsKey(ss)){
                   map.put(ss, map.get(ss) + 1);
               }else{
                   map.put(ss, 1);
               }
           }
       }
      
      int count =0; 
      for(String ss: map.keySet()){
          int n = map.get(ss);
          count += n*(n-1)/2;
      }
      return count;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}